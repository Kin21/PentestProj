import networkx
import socket
import ipaddress
import platform
import subprocess
import nmap

class DataNode:
    full_nodes = []

    def __init__(self, g):
        self.g = g

    def _add_object_functions(self, obj, *functions):
        for f in functions:
            self.g.add_edge(obj, f, isfunction=True)

    def add_functions(self, *functions):
        for f in functions:
            self.g.add_edge(self, f, isfunction=True)

    def add_data(self, *data):
        for d in data:
            if type(d) not in [type(i) for i in self.g.neighbors(self)]:
                print(' + New object found', d)
                self.g.add_edge(self, d, isfunction=False)
                self._add_object_functions(d, *d.functions)

    def run(self):
        neighbors = self.g[self].copy()
        for obj, t in neighbors.items():
            if t['isfunction']:
                obj()
                self.g.remove_node(obj)
        self.end()
        neighbors = self.g[self].copy()
        for obj, t in neighbors.items():
            if not t['isfunction']:
                if obj not in type(self).full_nodes:
                    obj.run()

    def end(self):
        edges_list = dict(self.g[self]).items()
        for obj, t in edges_list:
            if t['isfunction']:
                return False
        if self not in type(self).full_nodes:
            type(self).full_nodes.append(self)
        print(' -', self, 'Finished')
        return True


class Domain(DataNode):
    def __init__(self, g, domain):
        super().__init__(g)
        self.domain = domain
        self.functions = [self.getIP]

    def __str__(self):
        return 'Domain: {}'.format(self.domain)

    def getIP(self):
        print('Resolving domain name')
        ip_addr = socket.gethostbyname(self.domain)
        ip_addr = ipaddress.ip_address(ip_addr)
        ip = HostIP(self.g, ip_addr)
        self.add_data(ip)


class HostIP(DataNode):
    def __init__(self, g, ip):
        super().__init__(g)
        self.ip = ip
        self.alive = None
        self.functions = [self.checkIfAlive, self.getDomain]

    def __str__(self):
        return 'Host: {}'.format(str(self.ip))

    def _ping(self):
        host = str(self.ip)
        param = '-n' if platform.system().lower() == 'windows' else '-c'
        command = ['ping', param, '1', host]
        return subprocess.call(command) == 0

    def _nmap_alive_check(self):
        nm = nmap.PortScanner()
        nm.scan(hosts=str(self.ip), arguments='-n -sP -PR -PE -PA21,23,80,3389')
        return True if nm[str(self.ip)].state() == 'up' else False

    def checkIfAlive(self):
        print('Checking if host {} is up'.format(str(self.ip)))
        #p1 = self._ping()
        p2 = self._nmap_alive_check()
        self.alive = p2

    def getDomain(self):
        print('Performing reverse DNS lookup')
        d = socket.gethostbyaddr(str(self.ip))[0]
        d = Domain(self.g, d)
        self.add_data(d)

    def scanSevices(self):
        if self.alive == None:
            self.add_functions(self.scanSevices)
            return

        print('Start service scanning')
        if self.alive == False:
            return

        nm = nmap.PortScanner()





class Test(DataNode):
    def __init__(self, g):
        super().__init__(g)
        self.functions = []
        self.target = HostIP(g, '8.8.8.8')
        self.g.add_node(self, isfunction=False)
        self.add_data(self.target)

    def __str__(self):
        return 'Root Object'


g = networkx.Graph()
t = Test(g)
t.run()
# h = t.target
# h.run()
# d = list(g.nodes)[2]
# g = networkx.Graph()
# h = HostIP(g, '127.0.0.1')
# g.add_node(h)
#h.run()
# d = list(g[h])[0]
# d.run()