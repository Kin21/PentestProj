import time

from my_objects import HostIP, Test, IPv4Network
import networkx
from bokeh.io import output_notebook, show, save, output_file
from bokeh.models import Range1d, Circle, ColumnDataSource, MultiLine, LabelSet
from bokeh.plotting import figure
from bokeh.plotting import from_networkx


class Visualizer:
    def __init__(self, test_object):
        self.test_obj = test_object

    def create_html_visualization(self):
        new_g = networkx.Graph()
        t = self.test_obj
        for node in t.g.nodes:
            for n in t.g[node]:
                new_g.add_edge(str(node), str(n))
        for node in list(t.g.nodes):
            networkx.set_node_attributes(new_g, {str(node): {'info': node.get_information_string()}})
        # Choose a title!
        title = 'Test results'

        # Establish which categories will appear when hovering over each node
        HOVER_TOOLTIPS = [('Name', '@index'), ('info', '@info')]

        # Create a plot — set dimensions, toolbar, and title
        plot = figure(width=1500, height=1000, tooltips=HOVER_TOOLTIPS,
                      tools="pan,wheel_zoom,save,reset", active_scroll='wheel_zoom',
                      x_range=Range1d(-100.1, 100.1), y_range=Range1d(-100.1, 100.1), title=title)

        # Create a network graph object with spring layout
        # https://networkx.github.io/documentation/networkx-1.9/reference/generated/networkx.drawing.layout.spring_layout.html
        network_graph = from_networkx(new_g, networkx.spring_layout, scale=1, center=(0, 0))

        # Set node size and color
        network_graph.node_renderer.glyph = Circle(size=15, fill_color='skyblue')

        # Set edge opacity and width
        network_graph.edge_renderer.glyph = MultiLine(line_alpha=0.5, line_width=1)

        # Add network graph to the plot
        plot.renderers.append(network_graph)

        # Add Labels
        x, y = zip(*network_graph.layout_provider.graph_layout.values())
        node_labels = list(new_g.nodes())
        source = ColumnDataSource({'x': x, 'y': y, 'name': [node_labels[i] for i in range(len(x))]})
        labels = LabelSet(x='x', y='y', text='name', source=source, background_fill_color='white',
                          text_font_size='10px',
                          background_fill_alpha=.7)
        plot.renderers.append(labels)
        filename_seed = str(int(time.time()))
        output_file(filename='test{}.html'.format(filename_seed), title='TEST')
        save(plot)
        return 'test{}.html'.format(filename_seed)





if __name__ == '__main__':
    g = networkx.Graph()
    test_target1 = [HostIP(g, '127.0.0.1'), HostIP(g, '127.0.0.2'), HostIP(g, '127.0.0.11'), HostIP(g, '127.0.0.34')]
    test_target2 = [IPv4Network(g, '127.0.0.0/28')]
    t = Test(g, target=test_target2)
    t.run()
    t.run()
    output_notebook()
    new_g = networkx.Graph()
    for node in t.g.nodes:
        for n in t.g[node]:
            new_g.add_edge(str(node), str(n))
    for node in list(t.g.nodes):
        networkx.set_node_attributes(new_g, {str(node): {'info': node.get_information_string()}})


    # Choose a title!
    title = 'Test results'

    # Establish which categories will appear when hovering over each node
    HOVER_TOOLTIPS = [('Name', '@index'), ('info', '@info')]

    # Create a plot — set dimensions, toolbar, and title
    plot = figure(width=1500, height=1000,tooltips=HOVER_TOOLTIPS,
                  tools="pan,wheel_zoom,save,reset", active_scroll='wheel_zoom',
                  x_range=Range1d(-100.1, 100.1), y_range=Range1d(-100.1, 100.1), title=title)

    # Create a network graph object with spring layout
    # https://networkx.github.io/documentation/networkx-1.9/reference/generated/networkx.drawing.layout.spring_layout.html
    network_graph = from_networkx(new_g, networkx.spring_layout, scale=1, center=(0, 0))

    # Set node size and color
    network_graph.node_renderer.glyph = Circle(size=15, fill_color='skyblue')

    # Set edge opacity and width
    network_graph.edge_renderer.glyph = MultiLine(line_alpha=0.5, line_width=1)

    # Add network graph to the plot
    plot.renderers.append(network_graph)

    # Add Labels
    x, y = zip(*network_graph.layout_provider.graph_layout.values())
    node_labels = list(new_g.nodes())
    source = ColumnDataSource({'x': x, 'y': y, 'name': [node_labels[i] for i in range(len(x))]})
    labels = LabelSet(x='x', y='y', text='name', source=source, background_fill_color='white', text_font_size='10px',
                      background_fill_alpha=.7)
    plot.renderers.append(labels)

    output_file(filename='test.html', title='TEST')
    save(plot)
